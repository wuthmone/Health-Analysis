install.packages("devtools")
install.packages("KernSmooth")
library("KernSmooth", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
install.packages("rnn")
library(rnn)
trainr
?trainr
X1 = sample(0:127, 7000, replace=TRUE)
X2 = sample(0:127, 7000, replace=TRUE)
Y <- X1 + X2
X1 <- int2bin(X1, length=8)
X2 <- int2bin(X2, length=8)
Y  <- int2bin(Y,  length=8)
X <- array( c(X1,X2), dim=c(dim(X1),2) )
model <- trainr(Y=Y,
X=X,
learningrate   =  0.1,
hidden_dim     = 10,
start_from_end = TRUE )
plot(colMeans(model$error),type='l',
xlab='epoch',
ylab='errors'                  )
A1 = int2bin( sample(0:127, 7000, replace=TRUE) )
A2 = int2bin( sample(0:127, 7000, replace=TRUE) )
A <- array( c(A1,A2), dim=c(dim(A1),2) )
B  <- predictr(model,
A     )
A1 <- bin2int(A1)
A2 <- bin2int(A2)
B  <- bin2int(B)
hist( B-(A1+A2) )
detach("package:rnn", unload=TRUE)
install.packages("RSNNS")
install.packages("hydroGOF")
?mlp
??mlp
??mlp
View(iris)
View(outputs)
View(predictions)
View(inputs)
errror
error
patset
snnsObject
res
patset
View(iris)
View(iris)
class(iris)
View(outputs)
class(output)
class(outputs)
class(inputs)
View(predictions)
View(outputs)
View(outputs)
View(predictions)
View(inputs)
install.packages("sigmoid")
library("sigmoid", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
a <- seq(-10,10)
( b <- sigmoid(a) )
plot(b)
hist( a - sigmoid(b, inverse=TRUE) )
( c <- sigmoid(a, SoftMax=TRUE) )
plot(c)
args(sigmoid)
?sigmoid
??sigmoid
x = seq(1,5, by=0.05)
qplot(sigmoid(x))
x = seq(1,5, by=0.05)
plot(sigmoid(x))
plot(sigmoid(c))
x <- seq(-5, 5, 0.01)
plot(x, sigmoid(x), col='blue')
plot(x,name, col='blue')
plot(x, sigmoid(x), col='red')
summary(model)
library("nnet")
library(nnet)
mod <- nnet(Y1 ~ X1 + X2 + X3, data = neuraldat, size = 1
)
library(nnet)
mod <- nnet(Y1 ~ X1 + X2 + X3, data = neuraldat, size = 10)
library(NeuralNetTools)
data(neuraldat)
library(nnet)
mod <- nnet(Y1 ~ X1 + X2 + X3, data = neuraldat, size = 10)
par(mar = numeric(4))
plotnet(mod)
library(nnet)
mod <- nnet(Y1 ~ X1 + X2 + X3+ X4, data = neuraldat, size = 10)
nerualdat
neuraldat
head(neuraldat)
library(nnet)
mod <- nnet(Y1 ~ X1 + X2 + X3+ Y1, Y2, data = neuraldat, size = 10)
par(mar = numeric(4))
plotnet(mod)
plotnet(mod)
?neuralnet
??neuralnet
?rnn
??rnn
?lapply
?slip
?split
args(lapply)
str(split)
x <- c(rnorm(10), runif(10),rnorm(10,1))
f <- gl(3,10)
split(x,gl)
split(x,f)
f
?gl
a <-gl(5,1)
a
a <-gl(5,5)
a
gl(10,5)
a <- gl(2,2,20)
a
lapply(split(x,f),mean)
library(datasets)
head(airquality)
s <- split(airquality, airquality$Month)
lapply(s, function(x) colMeans (x[,c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans (x[,c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans (x[,c("Ozone", "Solar.R", "Wind")] na.rm = TRUE))
sapply(s, function(x) colMeans (x[,c("Ozone", "Solar.R", "Wind")] na.rm = TRUE))
sapply(s, function(x) colMeans (x[,c("Ozone", "Solar.R", "Wind")], na.rm = TRUE))
?interaction
swirl()
swirl::play()
library(swirl)
swirl()
1
swirl()
main
quit
quit
main()
quit()
library("swirl")
swirl()
main()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply
cls_vect <- sapply(flags, class)
cls_vect
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6,))
unique(c(3,4,5,5,5,6,6,4))
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags,unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply((unique_vals, function(elem) elem[2])
lapply((unique_vals,function(elem) elem[2])
lapply((unique_vals, function(elem) elem[2])
unique_vals
lapply(unique_vals, function(elem) elem[2])
main()
main()
sapply(flags,unique)
vapply(flags,unique, numeric(1))
ok()
sapply(flags,class)
sapply(flags,class, character(1))
ok()
vapply(flags,class, character(1))
?tapply
flags$landmass
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass , mean)
tapply(flags$population,flags$red, summary)
tapply(flags$population,flags$landmass, summary)
library(datasets)
data(iris)
library(datasets)
data(iris)
?iris
a <- iris$Sepal.Length
mean(a)
apply(iris, 1, mean)
rowMeans(iris[, 1:4])
colMeans(iris)
apply(iris, 2, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
data(mtcars)
?mtcars
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
with(mtcars, tapply(mpg, cyl, mean))
apply(mtcars, 2, mean)
lapply(mtcars, mean)
with(mtcars, tapply(mpg, cyl, mean))
?abs
str(abs)
a <- with(mtcars, tapply(mpg, cyl, mean))
dim(a)
class(a)
a[0,1]
a[1,1]
a[,1]
a[2,]
a[2]
a[2][1]
a[2][2]
a[2][2]
a[3]
abs(15.1)
lapply(a,abs)
sapply(a,abs)
b <- sapply(a,abs)
b
dim(b)
class(b)
b <- lapply(a,abs)
class(b)
b[1]
b$`8` - b$`4`
b$`4` - b$`8`
debug(ls)
ls
debug(ls)
ls
ls
ls
ls
ls
ls
ls
ls
ls
ls
ls
ls
ls
setwd("~/Desktop/Link to FYP/Data")
ls()
ls
ls()
usd <- read.csv("usdallyears.csv")
str(usd)
View*(usd)
View(usd)
sgp <- read.csv("sgpallyears.csv")
View(sgp)
sgp <- read.csv("sgpallyears.csv")
euro <- read.csv("euroallyears.csv")
View(euro)
View(sgp)
setwd("~/Desktop/R programming/Assignment")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
View(outcome)
?sort
sorted <- outcome[order(outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)]
sorted <- outcome[order(outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure),]
View(sorted)
sorted <- outcome[order(outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure, na.last = NA),]
View(sorted)
outcome[, 11] <- as.numeric(outcome[, 11])
sorted <- outcome[order(outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure, na.last = NA),]
dftry <- data.frame()
for(i in 1:length(outcome$State)){
if(outcome$State[i] == "AL"){
dftry <- rbind(dftry,stored_data[i,])
}
}
dftry <- data.frame()
for(i in 1:length(outcome$State)){
if(outcome$State[i] == "AL"){
dftry <- rbind(dftry,outcome[i,])
}
}
View(dftry)
sorted <- dftry[order(dftry$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure, na.last = NA),]
View(sorted)
View(sorted$Hospital.30.Day.Readmission.Rates.from.Heart.Failure)
head(sorted$Hospital.30.Day.Readmission.Rates.from.Heart.Failure)
min(sorted$Hospital.30.Day.Readmission.Rates.from.Heart.Failure)
head(sorted$Hospital.30.Day.Readmission.Rates.from.Heart.Failure)
sorted <- dftry[order(dftry$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure, na.last = NA),]
head(sorted$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
str(sorted)
dftry[, 11] <- as.numeric(dftry[, 11])
str(sorted)
dftry[, 11] <- as.numeric(dftry[, 11])
dftry <- cbind(dftry, c(1:length(dftry$State)))
dftry[,47]
str(dftry)
Rank <- c(1:length(dftry$State))
dftry$`c(1:length(dftry$State)) <- NULL
;
quit()
dftry$c(1:length(dftry$State)) <- NULL
dftry <- data.frame()
for(i in 1:length(outcome$State)){
if(outcome$State[i] == "AL"){
dftry <- rbind(dftry,outcome[i,])
}
}
Rank <- c(1:length(dftry$State))
dftry <- cbind(dftry, Rank)
str(dftry)
sorted <- outcome[order(outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure, na.last = NA)]
sorted <- dftry[order(dftry$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure, na.last = NA),]
sorted <- dftry[order(dftry[,11], na.last = NA),]
sorted <- dftry[order(dftry$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure, na.last = NA),]
sorted <- dftry[order(dftry[,11], na.last = NA),]
View(sorted)
sorted <- dftry[order(dftry$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure, na.last = NA),]
View(sorted)
length(dftry)
length(dftry$Provider.Number)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MD", "heart attack", "worst")
source("rankhospital.R")
rankhospital("MD", "heart attack", "worst")
rankhospital("AL", "heart attack", "worst")
al <- rankhospital("AL", "heart attack", "worst")
View(al)
source("rankhospital.R")
al <- rankhospital("AL", "heart attack", "worst")
View(al)
source("rankhospital.R")
al <- rankhospital("AL", "heart attack", "worst")
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
al <- rankhospital("AL", "heart attack", "worst")
al <- rankhospital("MD", "heart attack", "worst")
al
source("rankhospital.R")
al <- rankhospital("MD", "heart attack", "worst")
rankhospital("MD", "heart attack", "worst")
rankhospital("TX", "heart failure", 4)
rankhospital("MN", "heart attack", 5000)
rankhospital("TX", "heart failure", 4)
source("rankallhospital.R")
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
al <- rankhospital("TX", "heart failure", 4)
View(al)
al[order(al$Hospital.Name, al$Hospital.30.Day.Readmission.Rates.from.Heart.Failure)]
al[order(al$Hospital.Name, al$Hospital.30.Day.Readmission.Rates.from.Heart.Failure),]
bl <- al[order(al$Hospital.Name, al$Hospital.30.Day.Readmission.Rates.from.Heart.Failure),]
View(bl)
bl <- al[order( al$Hospital.30.Day.Readmission.Rates.from.Heart.Failure, al$Hospital.Name),]
View(bl)
View(al)
al <- al[order(al[,17], al[,2]),]
View(al)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
al <- rankhospital("TX", "heart failure", 4)
View(al)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
source("best.R")
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
v <- c(1:10)
length(v)
v[1]
source("rankall.R")
al <- rankall("heart attack",20)
source("rankall.R")
al <- rankall("heart attack",20)
source("rankall.R")
al <- rankall("heart attack", "best")
source("rankall.R")
al <- rankall("heart attack", "best")
unique(outcome$State)
source("rankall.R")
rankall("heart attack", "best")
source("rankall.R")
source("rankall.R")
source("rankhospital.R")
tail(rankall("pneumonia", "worst"), 3)
?rbind
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
source("rankall.R")
tail(rankall("pneumonia", "worst"), 3)
source("rankall.R")
rankall("pneumonia", "worst")
source("rankall.R")
rankall("pneumonia", "worst")
rankall("heart attack", 20)
source("rankall.R")
rankall("heart attack", 20)
source("rankall.R")
rankall("heart attack", 20)
j <-1
j <- j + 1
rankall("heart attack", 20)
source("rankall.R")
rankall("heart attack", 20)
?vector
source("rankall.R")
rankall("heart attack", 20)
?array
source("rankall.R")
rankall("heart attack", 20)
source("rankall.R")
bf <- rankall("heart attack", 20)
source("rankall.R")
bf <- rankall("heart attack", 20)
source("rankall.R")
bf <- rankall("heart attack", 20)
source("rankall.R")
bf <- rankall("heart attack", 20)
source("rankall.R")
bf <- rankall("heart attack", 20)
source("rankall.R")
bf <- rankall("heart attack", 20)
source("rankall.R")
bf <- rankall("heart attack", 20)
source("rankall.R")
bf <- rankall("heart attack", 20)
head(bf)
source("rankall.R")
bf <- rankall("heart attack", 20)
?storage.mode
source("rankall.R")
bf <- rankall("heart attack", 20)
source("rankall.R")
rankall("heart failure", 10)
rankall("pneumonia", "worst")
rankall("heart attack", 4)
source("best.R")
}
rankhospital("NY", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("WA", "heart attack", 7)
rankhospital("NC", "heart attack", "worst")
best("AK", "pneumonia")
best("NY", "pneumonia")
best("SC", "heart attack")
